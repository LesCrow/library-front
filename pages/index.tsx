import axios from "axios";
import Head from "next/head";
import Header from "../src/components/Header";
import Bibliotheque from "../src/components/Display/Bibliotheque";
import Authors from "../src/components/Display/Authors";
import { useQuery } from "react-query";
import Genre from "../src/components/Display/Genre";
import { useState, useEffect } from "react";
import FormNewBook from "../src/components/FormNewBook";
import FormNewAuthor from "../src/components/FormNewAuthor";
import FormNewGenre from "../src/components/FormNewGenre";
import useModal from "../src/components/useModal";
import Modal from "../src/components/Modal";

import pictoBook from "../public/picto-book.png";

const getAllBooks = async () => {
  try {
    const allBooks = await axios.get("http://localhost:5000/api/v1/books");
    return allBooks.data;
  } catch (error) {
    console.log(error);
  }
};

const getAllAuthors = async () => {
  try {
    const allAuthors = await axios.get("http://localhost:5000/api/v1/authors");
    return allAuthors.data;
  } catch (error) {
    console.log(error);
  }
};

const getAllCollections = async () => {
  try {
    const allCollections = await axios.get(
      "http://localhost:5000/api/v1/collections"
    );
    return allCollections.data;
  } catch (error) {
    console.log(error);
  }
};

export default function Home() {
  // Modal
  const { isShowing: isLoginFormShowed, toggle: toggleLoginForm } = useModal();
  const {
    isShowing: isRegistrationFormShowed,
    toggle: toggleRegistrationForm,
  } = useModal();

  // BibliothÃ¨que, authors, collection and add form displayer
  const [isAddOpen, setIsAddOpen] = useState(false);
  const [isAddBookOpen, setIsAddBookOpen] = useState(false);
  const [isAddAuthorOpen, setIsAddAuthorOpen] = useState(false);
  const [isAddCollectionOpen, setIsAddCollectionOpen] = useState(false);

  useEffect(() => {
    isAddBookOpen && setIsAddAuthorOpen(false);
    setIsAddCollectionOpen(false);
  }, [isAddBookOpen]);

  useEffect(() => {
    isAddAuthorOpen && setIsAddBookOpen(false);
    setIsAddCollectionOpen(false);
  }, [isAddAuthorOpen]);

  useEffect(() => {
    isAddCollectionOpen && setIsAddBookOpen(false);
    setIsAddAuthorOpen(false);
  }, [isAddCollectionOpen]);

  useEffect(() => {
    !isAddOpen && setIsAddBookOpen(false);
    setIsAddAuthorOpen(false);
    setIsAddBookOpen(false);
    setIsAddCollectionOpen(false);
  }, [isAddOpen]);

  // UseQuery
  const { isLoading, data: allBooks, error } = useQuery("books", getAllBooks);
  const { data: allAuthors } = useQuery("authors", getAllAuthors);
  const { data: allCollections } = useQuery("collections", getAllCollections);

  if (isLoading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>Something bad happen</p>;
  }

  return (
    <div>
      <div>
        <Head>
          <title>Wild Library</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
          <link
            href="https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap"
            rel="stylesheet"
          />
          <link
            href="https://fonts.googleapis.com/css2?family=Roboto&display=swap"
            rel="stylesheet"
          />
        </Head>

        <main className="bg-[#1F293D] h-full">
          {/* <img src={banniere.src} alt="library" className="object-cover" /> */}
          {/* <>
        <div>
          <button onClick={toggleLoginForm}>Login</button>
          <button onClick={toggleRegistrationForm}>Register</button>
          <Modal
            isShowing={isLoginFormShowed}
            hide={toggleLoginForm}
            title="login"
          >
            <form>
              <div className="form-group">
                <input type="text" placeholder="Username" />
              </div>
              <div className="form-group">
                <input type="text" placeholder="Password" />
              </div>
              <div className="form-group">
                <input type="submit" value="Login" />
              </div>
            </form>
          </Modal>
          <Modal
            isShowing={isRegistrationFormShowed}
            hide={toggleRegistrationForm}
            title="Register"
          >
            <form>
              <div className="form-group">
                <input type="text" placeholder="Email Address" />
              </div>
              <div className="form-group">
                <input type="text" placeholder="Username" />
              </div>
              <div className="form-group">
                <input type="text" placeholder="Password" />
              </div>
              <div className="form-group">
                <input type="submit" value="Register" />
              </div>
            </form>
          </Modal>
        </div>
      </> */}
          <Header />
          <div className="p-5">
            <Bibliotheque
              allBooks={allBooks}
              allAuthors={allAuthors}
              allCollections={allCollections}
            />
            <Authors allAuthors={allAuthors} />
            <Genre allCollections={allCollections} />
            <h2 className="w-fit" onClick={() => setIsAddOpen(!isAddOpen)}>
              ADD +
            </h2>
            {isAddOpen && (
              <div className="flex w-full justify-around my-5">
                <p onClick={() => setIsAddBookOpen(!isAddBookOpen)}>A book</p>
                <p onClick={() => setIsAddAuthorOpen(!isAddAuthorOpen)}>
                  An author
                </p>
                <p onClick={() => setIsAddCollectionOpen(!isAddCollectionOpen)}>
                  A collection
                </p>
              </div>
            )}
            {isAddBookOpen && (
              <FormNewBook
                allAuthors={allAuthors}
                allCollections={allCollections}
              />
            )}
            {isAddAuthorOpen && <FormNewAuthor />}
            {isAddCollectionOpen && <FormNewGenre />}
          </div>
        </main>
      </div>
    </div>
  );
}
